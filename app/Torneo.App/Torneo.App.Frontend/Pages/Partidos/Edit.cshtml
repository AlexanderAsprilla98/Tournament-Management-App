@page
@model Torneo.App.Frontend.Pages.Partidos.EditModel
@{
}
@if (Model.duplicate)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <strong>Ocurrio un error al crear</strong> El partido con la fecha y los equipos ingresados ya existe.
        <button type="button" class="close" data-dismiss="alert" aria-label="Close" onclick="$('.alert').alert('close')">
            <span aria-hidden="true">×</span>
        </button>
    </div>
}
<h1>Editar partido</h1>
@Html.ValidationSummary()
<form method="post">
    <div class="form-group">
        <label asp-for="partido.Id"></label>
        <input asp-for="partido.Id" class="form-control" readonly/>
    </div>
    <div class="form-group">
        <label asp-for="partido.FechaHora">Fecha y hora</label>
        <input asp-for="partido.FechaHora" class="form-control" id="FechaPartidoEditar"/>
        <span class="text-danger" asp-validation-for="partido.FechaHora"></span>
    </div>
    <div class="form-group">
        <label asp-for="EquipoLocalSelected">Equipo Local</label>
        <select asp-for="EquipoLocalSelected" asp-items="@Model.equipoOptions" name="idEquipoLocal" class="form-control" id="EquipoLocalPartidoEditar" required></select>
         
    </div>
    <div class="form-group">
        <label asp-for="EquipoVisitanteSelected">Equipo Visitante</label>
        <select asp-for="EquipoVisitanteSelected" asp-items="@Model.equipoOptions" name="idEquipoVisitante" class="form-control" id="EquipoVisitantePartidoEditar" required></select>
    </div>
    <div class="form-group">
        <label asp-for="partido.MarcadorLocal">Marcador Local</label>
        <!-- <input asp-for="partido.MarcadorLocal" class="form-control" id="MarcadorPartidoEditar" required type="number" min="0" max="99" pattern="^[0-9]$" class="form-control"/> -->
        <input asp-for="partido.MarcadorLocal" id="MarcadorPartidoEditar" type="number" class="form-control"/>
        <span class="text-danger" asp-validation-for="partido.MarcadorLocal"></span>
    </div>
    <div class="form-group">
        <label asp-for="partido.MarcadorVisitante">Marcador Visitante</label>
        <!-- <input asp-for="partido.MarcadorVisitante" class="form-control" id="MarcadorVisitantePartidoEditar" required type="number" min="0" max="99" pattern="^[0-9]$"/> -->
        <input asp-for="partido.MarcadorVisitante" id="MarcadorVisitantePartidoEditar" class="form-control" type="number"/>
        <span class="text-danger" asp-validation-for="partido.MarcadorVisitante"></span>
    </div>
    <button type="submit" class="btn btn-primary btn-block" id="BtnPartidoEditar">Editar equipo</button>
</form>
<a class="btn btn-secondary" asp-page="./Index">Volver</a>


<script>
document.addEventListener("DOMContentLoaded", function () {
        const equipoLocalSelect = document.getElementById("EquipoLocalPartidoEditar");
        const equipoVisitanteSelect = document.getElementById("EquipoVisitantePartidoEditar");

        // Función para ocultar opciones en el otro select
        function ocultarOpciones(select, id) {
            for (let i = 0; i < select.options.length; i++) {
                const option = select.options[i];
                const optionId = option.getAttribute("value");

                if (optionId === id) {
                    option.style.display = "none";
                } else {
                    option.style.display = "block";
                }
            }
        }
        
         // Registros de opciones ocultas
        const opcionesOcultasEquipoLocal = {};
        const opcionesOcultasEquipoVisitante = {};
        
        equipoLocalSelect.addEventListener("change", function () {
            const selectedOptionId = equipoLocalSelect.value;

            // Mostrar opciones ocultas previamente en el select de visitante
            for (const id in opcionesOcultasEquipoVisitante) {
                equipoVisitanteSelect.querySelector(`[value="${id}"]`).style.display = "block";
            }

            // Ocultar opciones en el select de visitante
            ocultarOpciones(equipoVisitanteSelect, selectedOptionId);

            // Actualizar el registro de opciones ocultas para el select de visitante
            opcionesOcultasEquipoVisitante[selectedOptionId] = true;
        });

        equipoVisitanteSelect.addEventListener("change", function () {
            const selectedOptionId = equipoVisitanteSelect.value;

            // Mostrar opciones ocultas previamente en el select de local
            for (const id in opcionesOcultasEquipoLocal) {
                equipoLocalSelect.querySelector(`[value="${id}"]`).style.display = "block";
            }

            // Ocultar opciones en el select de local
            ocultarOpciones(equipoLocalSelect, selectedOptionId);

            // Actualizar el registro de opciones ocultas para el select de local
            opcionesOcultasEquipoLocal[selectedOptionId] = true;
        });

        // Inicialización: Ocultar opciones en el select de visitante basado en el valor seleccionado del select de local
        equipoLocalSelect.dispatchEvent(new Event('change'));
        // Inicialización: Ocultar opciones en el select de local basado en el valor seleccionado del select de visitante
        equipoVisitanteSelect.dispatchEvent(new Event('change'));
      

    });

 


</script>