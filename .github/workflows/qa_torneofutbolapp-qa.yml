name: Build and deploy ASP.Net Core app to Render.com

on:
  push:
    branches:
      - qa
  pull_request:
    branches:
      - qa
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'

      - name: Install EF Tools
        run: |
          dotnet tool install --global dotnet-ef --version 6.0.8          
          
      - name: Build and Test
        working-directory: ./Torneo.App
        run: |
          dotnet restore
          dotnet build --configuration Release
          
      - name: Create Migration Script
        working-directory: ./Torneo.App/Torneo.App.Persistencia
        run: dotnet ef migrations script -o init.sql --idempotent cat init.sql
        env:
          ConnectionStrings__DefaultConnection: ${{ secrets.DB_CONNECTION_STRING }}
     
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Build Docker Compose
        run: |
          docker-compose build --no-cache
        env:
          MSSQL_SA_PASSWORD: ${{ secrets.MSSQL_SA_PASSWORD }}
    
      - name: Start SQL Server
        run: |
          docker volume create sqldata
          docker-compose up -d sql-server
          echo "Waiting for SQL Server to start..."
          sleep 30
          docker-compose logs sql-server
  
      - name: Deploy Application
        run: |
          docker-compose up -d torneo-app
          echo "Waiting for application to start..."
          sleep 30
          docker-compose ps
          docker-compose logs torneo-app
        env:
          MSSQL_SA_PASSWORD: ${{ secrets.MSSQL_SA_PASSWORD }}
          ConnectionStrings__DefaultConnection: ${{ secrets.DB_CONNECTION_STRING }}     

      - name: Publish with dotnet
        working-directory: ./Torneo.App
        run: dotnet publish Torneo.App.sln -c Release -o out

      - name: Build Docker image        
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/torneo-app .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/torneo-app:latest   

      - name: Build Docker images
        run: |
          docker-compose build
        env:
          MSSQL_SA_PASSWORD: ${{ secrets.MSSQL_SA_PASSWORD }}   

      - name: Start SQL Server
        run: |
          docker-compose up -d sql-server
          sleep 30
          docker-compose logs sql-server
        env:
          MSSQL_SA_PASSWORD: ${{ secrets.MSSQL_SA_PASSWORD }}  
        
      - name: Start Application
        run: |
          docker-compose up -d torneo-app
          sleep 30
          docker-compose logs torneo-app
          
      - name: Check Container Health
        run: |
          docker ps -a
          docker-compose logs
        if: always()
                
      - name: Wait for services to be healthy
        run: |
          timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:5000/health)" != "200" ]]; do sleep 5; done' || false

# deployment steps for Render
  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Deploy to Render.com
        run: |
          curl -X POST \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "serviceId": "srv-ctid1c8gph6c738524e0",
            "branch": "qa"
          }' \
          https://api.render.com/v1/services/srv-ctid1c8gph6c738524e0/deploys