# Use the SQL Server on Linux image
FROM mcr.microsoft.com/mssql/server:2019-latest

# Set environment variables for SQL Server
# 1. MSSQL_PID is the Product ID (PID) or Edition that the container will run with.
ENV MSSQL_PID=env.MSSQL_PID

# 2. MSSQL_SA_PASSWORD is the SQL Server system administrator (SA) password used to connect to SQL Server once the container is running.
ENV MSSQL_SA_PASSWORD=env.MSSQL_SA_PASSWOR

# 3. MSSQL_TCP_PORT is the TCP port the container will listen on at runtime.
ENV MSSQL_TCP_PORT=env.MSSQL_TCP_PORT

# 4. MSSQL_DATA_DIR is the directory path inside the container where SQL Server will store data files.
ENV MSSQL_DATA_DIR=/var/opt/mssql/data

# 5. MSSQL_LOG_DIR is the directory path inside the container where SQL Server will store log files.
ENV MSSQL_LOG_DIR=/var/opt/mssql/log

# 6. MSSQL_AGENT_DIR is the directory path inside the container where SQL Server Agent will store job files.
ENV MSSQL_AGENT_DIR=/var/opt/mssql/agent

# 7. MSSQL_COLLATION is the default collation for the instance.
ENV MSSQL_COLLATION=SQL_Latin1_General_CP1_CI_AS

# 8. MSSQL_LCID is the default language for the instance.
ENV MSSQL_LCID=1033

# 9. MSSQL_MEMORY_LIMIT_MB is the max amount of memory in MB that SQL Server can use.
ENV MSSQL_MEMORY_LIMIT_MB=2048

# 10. MSSQL_ENABLE_HADR is whether to enable SQL Server Availability Groups.
ENV MSSQL_ENABLE_HADR=Y

# 11. MSSQL_AGENT_ENABLED is whether to enable SQL Server Agent.
ENV MSSQL_AGENT_ENABLED=Y

# Create a database named Torneo
ENV MSSQL_DB_NAME=Torneo

WORKDIR /app

# Start SQL Server and create the database
COPY Torneo.App/Torneo.App.Persistencia/create-database.sql /docker-entrypoint-initdb.d/

# Start SQL Server 

# 1. docker build -t torneo-db .
# 2. docker run -d -p 1433:1433 --name torneo-db torneo-db
# 3. docker exec -it torneo-db /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "env.SA_PASSWORD" -Q "SELECT Name from sys.Databases"


EXPOSE 1433